/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  7
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
#include "../../geometry"

blocks
(
    hex (1 2 5 4 1 2 10 9) ($nx $ny0 1 ) simpleGrading (1 1 1)
    hex (4 5 7 6 9 10 12 11) ($nx $ny1 1) simpleGrading (1 1 1)
//     hex (2 3 6 5 10 11 14 13) ($nx0 $ny $nx0 ) simpleGrading (1 1 1)
//     hex (3 4 7 6 11 12 15 14) ($nx1 $ny $nx0) simpleGrading (1 1 1)
//     hex (10 11 14 13 16 17 20 19) ($nx0 $ny $nx1) simpleGrading (1 1 1)
//     hex (11 12 15 14 17 18 21 20) ($nx1 $ny $nx1) simpleGrading (1 1 1)
);

edges
(
);

boundary
(
    outlet
    {
        type patch;
        faces
        (
            (2 5 10 2)
            (5 7 12 10)
            (6 7 12 11)
//             (5 6 14 13)
//             (6 7 15 14)
//             (13 14 19 20)
//             (14 15 21 20)
//             (4 12 15 7)
//             (12 18 21 15)
//             (17 18 21 20)
//             (16 17 20 19)
        );
    }
    ground
    {
        type wall;
        faces
        (
            (4 6 11 9)
//             (3 4 12 11)
//             (11 12 18 17)
//             (10 11 17 16)
        );
    }
    air_to_plate
    {
        type patch;
        sampleMode nearestPatchFace;
        sampleRegion plate;
        samplePatch plate_to_air;
        faces
        (
            (1 4 9 1)
//             (2 3 11 10)
        );
    }
//     symmetry0
//     {
//         type symmetry;
//         faces
//         (
//             (2 3 6 5)
//             (3 4 7 6)
//         );
//     }
//     symmetry1
//     {
//         type symmetry;
//         faces
//         (
//             (2 10 13 5)
//             (10 16 19 13)
//         );
//     }
    wedge0
    {
        type wedge;
        faces
        (
            (1 2 5 4)
            (4 5 7 6)
        );
    }
    wedge1
    {
        type wedge;
        faces
        (
            (1 2 10 9)
            (9 10 12 11)
        );
    }
);

mergePatchPairs
(
);


// ************************************************************************* //
