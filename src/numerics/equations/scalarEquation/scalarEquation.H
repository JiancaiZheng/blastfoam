/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | Copyright (C) 2021
     \\/     M anipulation  | Synthetik Applied Technologies
-------------------------------------------------------------------------------
License
    This file is a derivative work of OpenFOAM.

    OpenFOAM is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.

Class
    Foam::scalarEquation

Description
    Base class for the a scalar equation

\*---------------------------------------------------------------------------*/

#ifndef scalarEquation_H
#define scalarEquation_H

#include "Equation.H"
#include "dictionary.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

/*---------------------------------------------------------------------------*\
                          Class scalarEquation Declaration
\*---------------------------------------------------------------------------*/

class scalarEquation
:
    public Equation<scalar>
{
public:

    // Constructors

        //- Construct null
        scalarEquation();

        //- Construct given bounds
        scalarEquation(const scalar lowerLimit, const scalar upperLimit);


    //- Destructor
    virtual ~scalarEquation();


    // Member Functions

        //- Check if the solution is bracketed
        bool containsRoot(const scalar y0, const scalar y1) const;

        //- Check if the solution is bracketed (compute bounds)
        bool containsRoot(const label li) const;
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
