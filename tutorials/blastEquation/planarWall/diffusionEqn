/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.3.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "constant";
    object      diffusionProperties;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

lowerBound  1e-6;
upperBound  1.0;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

 // Additional folders to include
codeOptions
#{
    -I$(FOAM_SRC)/finiteVolume/lnInclude \
    -I$(FOAM_SRC)/meshTools/lnInclude
#};

// Additional libraries to include
codeLibs
#{
    -lfiniteVolume
#};

// Headers to include
codeInclude
#{
#include "Time.H"
#include "pisoControl.H"
#include "fvCFD.H"
#include "lookupTables1D.H"
#};

fx_code
#{
    static label iter = 0;
    iter++;

    static fileName path(cwd());
    static Time runTime
    (
        Time::controlDictName,
        fileName(path.path()),
        fileName(path.name())
    );
    runTime.setTime(0.0, 0);

    fvMesh mesh
    (
        IOobject
        (
            fvMesh::defaultRegion,
            runTime.timeName(),
            runTime,
            IOobject::MUST_READ
        )
    );

    pisoControl piso(mesh);

    volScalarField c
    (
        IOobject
        (
            "c",
            runTime.timeName(),
            mesh,
            IOobject::MUST_READ,
            IOobject::NO_WRITE
        ),
        mesh
    );

    dimensionedScalar D("D", dimVelocity*dimLength, x);
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

    SolverPerformance<scalar>::debug = 0;
    while (piso.loop(runTime))
    {
        while (piso.correctNonOrthogonal())
        {
            fvScalarMatrix cEqn
            (
                fvm::ddt(c) - fvm::laplacian(D, c)
            );

            cEqn.solve();
        }
    }

    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

    static lookupTable1D<scalar> solution
    (
        dictionary(IFstream("./diffusionProperties")()).subDict("solution"),
        "x",
        "c"
    );

    scalar err = 0.0;
    forAll(c,celli)
    {
        scalar Cexp = solution.lookup(mesh.C()[celli].x());
        err += magSqr((c[celli] - Cexp)/Cexp);
    }
    reduce(err, sumOp<scalar>());
    err = sqrt(err/returnReduce(c.size(), sumOp<label>()));

    runTime.setTime(scalar(iter), iter);
    c.write();

    return err;
#};

// ************************************************************************* //
