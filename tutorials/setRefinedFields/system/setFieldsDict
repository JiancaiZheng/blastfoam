/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.3.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      setFieldsDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
#include "$FOAM_CASE/parameters";

fields (test0);

defaultFieldValues
(
    volScalarFieldValue     test0 -setAllBoundaries 0
    surfaceScalarFieldValue test0f 0
    pointScalarFieldValue   pointtest0 0
    volVectorFieldValue     test1 (0 0 0)
    volScalarFieldFunction  test2
    {
        type coded;
        sine
        {
            type        sine;
            amplitude   $s;
            frequency   2.0;
            level       0.0;
        }
        code
        #{
            return Func1(sine).value(y);
        #};
    }
);


regions
(
    cylinderToCell // Use cylinder for 3D
    {
        p1 (0.5 0.5 0);
        p2 (0.5 0.5 1);
        radius 0.05;
        backup
        {
            p1 (0.5 0.5 0);
            p2 (0.5 0.5 1);
            radius 0.2;
        }
        refine yes;
        level 3;

        fieldValues
        (
            volScalarFieldValue test0   2
        );
    }
    boxToCell // Use cylinder for 3D
    {
        boxes ((0 0 0) (0.5 0.5 1));
        refine yes;
        level 3;

        fieldValues
        (
            volScalarFieldValue test0 -setBoundaries (patches)  1
            volVectorFieldValue test1 -setBoundaries (patches)  $v1
        );
    }
    boxToFace // Use cylinder for 3D
    {
        boxes ((0 0 0) (0.5 0.5 1));
        refine yes;
        level 3;

        fieldValues
        (
            surfaceScalarFieldValue test0f -setBoundaries (patches)  1
        );
    }
    boxToPoint // Use cylinder for 3D
    {
        boxes ((0 0 0) (0.5 0.5 1.1));
        refine yes;
        level 3;

        fieldValues
        (
            pointScalarFieldValue pointtest0 -setBoundaries (patches)  1
        );
    }
);


// ************************************************************************* //
